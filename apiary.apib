FORMAT: 1A

# Dave's Plant Breeding API
This is a copy snapshot on Thursday 18jun

The Breeding API specifies a standard interface for plant phenotype/genotype databases to serve 
their data to crop breeding applications. It is a <i>shared</i>, <i>open</i> API, to be
used by all data providers and data consumers who wish to participate. Initiated in May 2014, it is
currently in an actively developing state, so now is the time for potential participants to help
shape the specifications to ensure their needs are addressed. The listserve for discussions and 
announcements is at http://mail2.sgn.cornell.edu/cgi-bin/mailman/listinfo/plant-breeding-api .

### URL structure

API requests are structured as "\<server\>/brapi/v1/", 
where "v1" is the version number of the API, followed by the command.  
Example: /brapi/v1/markerprofiles/2939  

### Structure of the response object:
The return objects are encoded in JSON. 
The response always consists of a "metadata" key that minimally 
contains the pagination information in a "pagination" key and the status information.

The pagination object contains the keys "pageSize", "currentPage", "totalCount", "totalPages".

The status object contains a list of objects with the keys "code" and "message".

The payload data is contained simply in the topmost object level.

Additional documentation is in the [GitHub wiki](https://github.com/plantbreeding/). 
See especially the [Best Practices and Conventions]
(https://github.com/plantbreeding/documentation/wiki/Best-Practices-and-Conventions).

### API call categories:  
Scope: "CORE", "PHENOTYPING", "GENOTYPING", "OTHER".  
Status: "ACCEPTED", "IN DISCUSSION", "SUGGESTED".


# Group Germplasm
Note: The plural of germplasm is germplasm. (no "s")

## Germplasm ID [/brapi/v1/germplasm?name={name}&matchMethod={matchMethod}&include={synonyms}&pageSize={pageSize}&page={page}]
Other services' requests use the server's internal `germplasmId`. This service provides the germplasmId.
For the requested name or synonym, returns the internal identifier of that germplasm line.
- If there is none, the empty list is returned.  
- If there is one or more than one match, returns an array of all matching germplasmIds and their text representations.

###### Response data types
|Variable|Datatype|Description|Required|  
|------|------|------|:-----:|
|germplasmId|string|internal DB id |Y|
|breederCode|string|Unique identifier  for germplasm in a breeding program|Y|
|accessionNumber|string|Unique identifier for germplasm within a collection||
|germplasmName|string|Name of the germplasm. It can be the prefered name and does not have to be unique||
|synonyms|array of string|list of synonyms including accession Name||
|germplasmPUI|string|Permanent identifier (e.g. URI, DOI, LSID)||

Scope: CORE.  Status: IN DISCUSSION.
### Germplasm ID by name [GET]
+ Parameters
    + name (required, text, `mor% morex mo* more?`) ... The name or synonym.
    + matchMethod (optional, string, `wildcard`) ... Whether to restrict the search to exact (case insensitive) or wildcard. \ can be used to escape characters.
    matches. Possible values are 'exact', 'wildcard'. Wildcard uses both * or percent sign for any number of character and ? for one character matching. Default is exact. Note: for implementation be aware that security issues (e.g. sql injection) are the responsability of the developer.
    + include (optional, string, `synonyms`) ... Whether to include synonyms in the output.
    + pageSize (optional, integer, `1000`) ... The size of the pages to be returned. Default is `1000`.
    + page (optional, integer, `10`) ... Which result page is requested
+ Response 200 (application/json)

        {    
            "metadata"  :   
            {   
                "pagination"    :   { "pageSize": 1000, "currentPage": 10, "totalCount": 27338, "totalPages": 28 },
                "status"        :   [ ],
                "queryName"     :   "mor%"
            },
            "germplasm" :  [
                { 
                    "accessionNumber": "MOREX",
                    "synonyms" : [ "M25", "CIHO15773" ],
                    "PUI" : "",
                    "germplasmName": "Pahang",
                    "breederCode": "01BEL084609",
                    "germplasmId": 382
                },
                {
                    "accessionNumber": "MORGENROT",
                    "synonyms" : [ ],
                    "PUI" : "",
                    "breederCode": "01BEL084609",
                    "germplasmId": 383
                }
            ]
        }    
        
## Germplasm details [/brapi/v1/germplasm/{id}]
Scope: CORE. Status: IN DISCUSSION.  
###### Response data types
|Variable|Datatype|Description|Required|  
|------|------|------|:-----:|
|germplasmId|string|Internal db identifier|Y|
|breederCode|string|Unique identifier  for germplasm in a breeding program|Y|
|accessionNumber|string|This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection||
|germplasmName|string|Name of the germplasm. It can be the prefered name and does not have to be unique||
|synonyms|array of string|List of other germplasm name||
|germplasmPUI|string|Permanent identifier (e.g. URI, DOI, LSID)||
|commonCropName|string|Common name fo the crop (e.g. wheat, rice, maize, cassava, banana)||
|instituteCode|string|Institute that has bred the material. Note: The code may consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. COL001) as recommended by FAO WIEWS |Y|
|instituteName|string|Name of the institute (or person) that bred the material.||
|biologicalStatusOfAccessionCode|string|400) Breeding/research material 410) Breeder's line 411) Synthetic population 412) Hybrid 413) Founder stock/base population 414) Inbred line (parent of hybrid cultivar) 415) Segregating population 416) Clonal selection 420) Genetic stock 421) Mutant (e.g. induced/insertion mutants, tilling populations) 422) Cytogenetic stocks  423) Other genetic stocks (e.g. mapping populations)500) Advanced or improved cultivar (conventional breeding methods) 600) GMO (by genetic engineering) 999) Other||
|countryOfOriginCode|string|3-letter ISO 3166-1 code of the country in which the sample was bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.).||
|typeOfGermplasmStorageCode|string|If germplasm is maintained under different types of storage, multiple choices are allowed. 10) Seed collection 11) Short term 12) Medium term 13) Long term 20) Field collection 30) In vitro collection 40) Cryopreserved collection 50) DNA collection 99) Other (elaborate in REMARKS field)||
|genus|string|Genus name for taxon. Initial uppercase letter required.||
|species|string|Specific epithet portion of the scientific name in lowercase letters.||
|speciesAuthority|string|||
|subtaxa|string|Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: ‘subsp.’ (for subspecies); ‘convar.’ (for convariety); ‘var.’ (for variety); ‘f.’ (for form); ‘Group’ (for ‘cultivar group’).|
|subtaxaAuthority|string|||
|donors|array of string| code of the donor institute and Identifier assigned to an accession by the donor, and permanent identifier.||
|acquisitionDate|string|Date on which the accession entered the collection where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or ‘00’ [double zero].|

### Germplasm details by id [GET]
+ Parameters
    + id (required, string, `382`) ... the internal id of the germplasm
    
+ Response 200 (application/json)

        {
        "metadata": 
        {
            "status": [],
            "pagination": 
            {
                "pageSize": 1000,
                "currentPage": 1,
                "totalCount": 1,
                "totalPages": 1
            }
        },
        "germplasm": 
        [
            {
                "germplasmId": "01BEL084609",
                "germplasmPUI": "http://www.crop-diversity.org/mgis/accession/01BEL084609",
                "germplasmName": "Pahang",
                "accessionNumber": "ITC0609",
                "breederCode": "01BEL084609",
                "synonyms": [ ],
                "commonCropName": "banana",
                "instituteCode": "01BEL084",
                "instituteName": "ITC",
                "biologicalStatusOfAccessionCode": 412,
                "countryOfOriginCode": "UNK",
                "typeOfGermplasmStorageCode": 10,
                "genus": "Musa",
                "species": "acuminata",
                "speciesAuthority": "",
                "subtaxa": "sp malaccensis var pahang",
                "subtaxaAuthority": "",
                "donors": 
                [
                    {
                        "donorAccessionNumber": "",
                        "donorInstituteCode": "",
                        "pui": ""
                    }
                ],
                "acquisitionDate": "19470131"
            }
        ]
        }
        
## Germplasm pedigree [/brapi/v1/germplasm/{id}/pedigree?notation=purdy]
pedigreeString: text representation of the pedigree in [Purdy notation]
(http://wheat.pw.usda.gov/ggpages/gopher/administration/Template%20for%20Germplasm%20records.html) or [Lamacraft] (http://link.springer.com/article/10.1007%2FBF00021556).  
Scope: OTHER. Status: IN DISCUSSION.
### Germplasm pedigree by id [GET]
+ Parameters
    + id (required, number, `382`) ... the internal id of the germplasm
    + notation (optional, string, `purdy`) ... text representation of the pedigree
+ Response 200 (application/json)
    
        { 
            "germplasmId": 382,
            "pedigreeString" : "Cree / Bonanza",
            "parent1Id" : 166,
            "parent2Id" : 143
        }

# Group Germplasm attributes
Germplasm "attributes" are simply-inherited characteristics (characterization descriptors) that are not environment-dependent but 
inherent in the germplasm line.  They include genes, QTLs, and genetic "traits" like wheat grain 
hardness.  They are often evaluated by genotyping for diagnostic markers.
## List attributes available [/brapi/v1/attributes?attributeCategory=2]
Scope: OTHER. Status: IN DISCUSSION.
NEED: services for attributeCategory, attributes by germplasmId (date of determination)
### Germplasm attributes [GET] 
List all available attributes.
+ Parameters
    + attributeCategory (optional, string, `morphological`) ... filter for kind of attributes
+ Response 200 (application/json)

        [
            {
            "attributeId": 1,
            "code": "RHT",
            "URI": "http://www.cropontology.org/rdf/CO_321:0000020",
            "name": "Rht-B1b",
            "description": "Allele of diagnostic marker 11_4769",
            "attributeCategoryId": 2,
            "attributeCategoryName": "Agronomic",
            "datatype": "Categorical",
            "values": ["Present", "Absent", "Heterozygous"]
            },
            {}
        ]
        
## Germplasm attribute values by germplasmId [/brapi/v1/attributes/{germplasmId}?attributeList={attributeId},{attributeId}]
### Germplasm attribute values [GET]
Values for all attributes by default.
+ Parameters
    + germplasmId (required, string, `993`) ... The germplasm characterized
    + attributeId (optional, integer, `1`) ... Restrict the response to only the listed attributes.
+ Response 200 (application/json)

        {
        "germplasmId": "993",
        "values": 
        [
            {"attributeId": 1,
             "attributeName": "Rht-B1b",
             "attributeCode": "RHT",
             "value": "Present", 
             "dateDetermined": "20070528"
            },
            {}
        ]
        }

## Germplasm markerprofiles  [/brapi/v1/germplasm/{id}/markerprofiles]
Retrieve the markerProfileIds for a given Germplasm ID  
Scope: GENOTYPING. Status: IN DISCUSSION.
### Markerprofiles by germplasmId [GET]
+ Response 200 (application/json)
        
        {
            germplasmId : 39393,
            markerProfiles : [
                3939, 4484, 3993
            ],  ...
        }


# Group Markerprofiles

For the purposes of this API, the definition of markerprofile is *the allele calls for a specified germplasm line, for all markers, for a specified set of genotyping experiments or all experiments.*

Basic concepts in the **Breeding API**:

- *markerprofile*: A set of marker scores for a specific extract from a specific germplasm.
- *extract* : a preparation from a germplasm for an analysis. 
- *germplasm*: a single genetic entity (cultivar, variety, accession, breeding line) used for analysis
- *marker*: a DNA sequence polymorphism, potentially localized to a single genomic location
- *allele*: one of the two possible states of a marker in each haploid chromosome complement of a specified germplasm, as determined in a specified experiment. A diploid organism has two alleles per marker.
- *missing*: a germplasm/marker/experiment combination for which no allele result is available, whether it was tested for or not

## Markerprofile search [/brapi/v1/markerprofiles?germplasm={germplasmId}&extract={extractId}]
Scope: GENOTYPING.
Status: IN DISCUSSION.
For the requested Germplasm Id and/or Extract Id, returns the Markerprofile Id and number of non-missing allele calls 
(marker/allele pairs).
[Example] (http://malt.pw.usda.gov/t3/wheatplus/brapi/v1/markerprofiles/993_83/count?analysisMethod=GoldenGate)
### Retrieve markerprofile Id's [GET]
+ Parameters
    + germplasmId (optional, number, `993`) ... The server's internal id for the Germplasm ID, as returned by the **Find markerprofile by Germplasm** service.
    + extractId (optional, number, `84`) ... The server's internal id for the ExtractId
+ Response 200 (application/json)

        [
            {   
                "markerProfileId": "993",
                "germplasmId" : 2374,
                "extractId" : 3939,
                "analysisMethod": "GoldenGate",
                "resultCount": 1470
            },{
                "markerProfileId": "994",
                "germplasmId" : 2374,
                "extractId" : 3939,
                "analysisMethod": "GBS",
                "resultCount": 1470
            }
        ]

## Markerprofile data [/brapi/v1/markerprofiles/{id}?page=&pageSize= ]
Scope: GENOTYPING.
Status: IN DISCUSSION.
For the requested markerprofile ID, returns the allele call for each marker. 
   
**Allele encodings**

- Codominant markers such as SNPs: AA or BB for homozygotes, AB for 
heterozygotes
- Dominant markers such as DArTs: 1 for present, 0 for absent

**Open issue:**
The pages of data will need to be sorted sensibly in order for the
requested page to be delivered consistently.  By map or genome position?
Alphabetically?
###### Response data types
|Variable|Datatype|Description|Required|  
|------|------|------|:-----:|
|markerprofileId|string|Unique in the database. Can be a catenation of unique IDs for germplasm and extract.|Y|
|germplasmId|integer||Y|
|extractId|integer||Y|
|analysisMethod|string|||
|encoding|string|list of all possible scores|Y|
|data|object|array of marker-name/score pairs|Y|
|pagination|object|pageSize, currentPage, totalCount, totalPages|Y|

### Alleles By markerprofile Id [GET]
+ Parameters
    + id (required, number, `993`) ... The server's internal id for the germplasm line, as returned by the **Find Germplasm by Name** service.
    + pageSize (optional, number, `10000`) ... The number of allele call results (marker/allele pairs) to be returned in the response. If multiple experiments are requested, some responses will contain the last results from one experiment followed by the first results from the next.
    + page (optional, number, `1`) ... Required if `pageSize` is given; and requires that `pageSize` be given. The first page is 1, not 0.

+ Response 200 (application/json)

        {
            "pagination" : { pageSize: 30, currentPage: 39, totalCount: 48484939, totalPages:34948 },
            "germplasmId": 993,
            "extractId" : 38383, 
            "markerprofileId": 37484,
            "analysisMethod": "GBS-Pst1",
            "encoding": "AA,BB,AB",
            "data": { "marker1": "AA", "marker2":"AB", ... },
        }

## Markerprofile data [/brapi/v1/markerprofiles ]
Scope: GENOTYPING.
Status: IN DISCUSSION.

## MarkerProfile allelematrix [/brapi/allelematrix?id=100,101,102]
This uses a more efficient data structure and pagination for large number of markers.

### scores [GET]
+ Paramaters
    + id (required, string, "100, 101, 103") marker profile id
+ Response 200 (application/json)

        [
            {"makerprofileId": ["id1","id2","id3"..]
            },
            "scores": 
                [
                    {"marker1":["AB,AA,AA"]},
                    {"marker2":["AA,AB,AA"]}
                ]
            }
        ]

### Store markerprofile Id [POST]

+ Body

        {
            "extractId" : 38383, 
            "markerprofileId": 37484,
            "analysisMethod": "GBS-Pst1",
            "encoding": "AA,BB,AB",
            "data": { "marker1": "AA", "marker2":"AB", ... },
        }

+ Response 200 (application/json)

        { 
            "germplasmId" : 994
        }


# Group Study

API to retrieve information about studies (trials, nurseries).

## Crop [/brapi/v1/crops]
Call to retrieve a list of supported crops.

### List crops [GET]
+ Response 200 (application/json)
        
        [ "rice", "wheat", "barley", "maize", "cassava"]

## Program [/brapi/v1/programs]
Call to retrieve a list of programs.

### List programs [GET]

+ Response 200 (application/json)
        
        [
            {
                "id": "123",
                "name": "Rice Improvement Program",
                "crop": "rice",
                "objective" : "Disease resistance",
                "leadPerson" : "Dr. Henry Beachell"
            },
            {
                "id": "456",
                "name": "Wheat Improvement Program",
                "crop": "wheat",
                "objective" : "Yield improvement",
                "leadPerson" : "Dr. Norman Borlaug"
            }
        ]

## Study Types [/brapi/v1/studyTypes]

Call to retrieve the list of study types.

### List study types [GET]
+ Response 200 (application/json)
        
        [
            {
                "name": "Nursery",
                "description": "Description for Nursery study type"
            },
            {
                "name": "Trial",
                "description": "Description for Nursery study type"
            }
        ]

## Study Instances [/brapi/v1/study/{studyId}/instances]

Get a list of study instances. 
This information is used to add the `studyInstance` parameter filter in the "get observation units" call.

### List study Instances [GET]

+ Response 200 (application/json)

        [   
            {
                "instanceNumber": 1,
                "locationName" : "Zimbabwe",
            },
            {
                "instanceNumber": 2,
                "locationName" : "Kenya",
            }
        ]

## List Studies [/brapi/v1/studies?programId={programId}]
Scope: CORE.
Status: IN DISCUSSION.

Get list of studies
TO DO: Probably needs pagination information. 

### List of study summaries [GET]
+ Parameters
    + programId (optional, string, `1`) ... Program filter to only return studies associated with given program id.
+ Response 200 (application/json)

        {
            "metadata": {
                "pagination": {
                    "pageSize": 2,
                    "currentPage": 1,
                    "totalCount": 100,
                    "totalPages": 50
                }
            },
            "studies": [
                {
                    "id": "123",
                    "name": "BlightResistanceinPhillipines",
                    "objective": "Testblightresistantcultivars",
                    "type": "Trial",
                    "season": "Winter",
                    "location": "Phillipines",
                    "startDate": "2015-06-01",
                    "endDate": "2015-12-31",
                    "programName": "RiceImprovementProgram",
                    "designType": "RCBD",
                    "keyContact": "Mr.PlantBreederA"
                },
                {
                    "id": "345",
                    "name": "Earlygenerationtesting",
                    "objective": "Identifyblightresistantcultivars",
                    "type": "Nursery",
                    "season": "Winter",
                    "location": "Phillipines",
                    "startDate": "2015-06-01",
                    "endDate": "2015-12-31",
                    "programName": "RiceImprovementProgram",
                    "designType": "RCBD",
                    "keyContact": "Mr.PlantBreederB"
                }
            ]
        }        

## Study Details [/brapi/v1/studies/{id}]
Scope: CORE.
Status: IN DISCUSSION.

Retrieve the details of the study required for field data collection

### Retrieve study details [GET]
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the experiment.
+ Response 200 (application/json)
    
        {
            studyId: "1",
            studyType: "trial",
            name: "Fieldbook A",
            objective: "Generate seeds",
            startDate: "2014-08-01",
            keyContact: "Mr. Plant Breeder",
            locationName: "Ibadan",
            designType: "RCBD",
            traits: [ 'trait1', 'trait2'...],
            designDetails: [ 
                { 
                  plotId: "11",
                  blockId: "1",
                  rowId: "20",
                  columnId: "22",
                  replication: "1",
                  checkId: "0",
                  germplasmId: "143",
                  germplasmName: "ZIPA_68"
                }, ...
            ]
        },
 

## Layout [/brapi/v1/studies/{id}/layout]
Scope: CORE.
Status: SUGGESTED.

Retrieve the plot layout of the study with id {id}.

### Retrieve study details [GET]
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the experiment.
+ Response 200 (application/json)
    
        {
            "studyId": 1,
            { 
                "plotId": 11,
                "plotName": "ZIPA_68_Ibadan_2014",
                "blockNumber": 1,
                "rowNumber": 20,
                "columnNumber": 22,
                "replicate": 1,
                "isCheck": "T",
                "germplasmId": 143,
                "germplasmName": "ZIPA_68"
            }, ...
            
        },
 

# Group Phenotypes


API to retrieve data (phenotype, environment variables) from studies



## Phenotypes dataset [/brapi/v1/phenotypes?observationUnitLevel=plot&studyDbId=876&treatmentFactor=lowInput&germplasmGenus=&germplasmDbId&germplasmURI=http://data.inra.fr/accession/234Col342&germplasmSpecies=Triticum&panel=diversitypanel1&collection=none&observationVariables=CO_321:000034,CO_321:000025&location=bergheim&phenotypingCampaign=2005,2006&pageSize={pageSize}&page={page}]
Scope: PHENOTYPING.
Status: IN DISCUSSION.

Use case: this section allows to get a dataset from multiple studies. It allows to integrate data from several databases.

### Phenotypes [GET]
location : first find all the studies for your location search parameter then inject this list of studyIds 
We probably need a better handling of the list of possible values.
Rule of thumb : we can inject any list with less than a hundred Ids, like studyDbId. If we have more, let's try to use another filter, like species or panel for germplasm
In the response, note that trait ids can either be ontology ids or URI. 
+ Parameters
    + germplasmURI (optional, text, `http://data.inra.fr/accession/234Col342`) ... The name or synonym of external genebank accession identifier
    + germplasmDbId (optional, text, `986`) ... The name or synonym of external genebank accession identifier
    + germplasmSpecies (optional, text, `Aegilops taushi`) ... The name or synonym of genus or species ( merge with below ?)
    + germplasmGenus (optional, text, `Triticum, Hordeum`) ... The name or synonym of genus or species
    + panel (optional, text, `breedingProgramPanel2011`) ... The name of a specific panel 
    + collection (optional, text, `BRCCollection_Wheat`) ... The name of a specific Collection    
    + observationVariables (optional, text, `CO_321:00000234`) ... The IDs of traits, could be ontology ID, database ID or URI
    + studyDbId (optional, text, `2356`) ... The database ID / PK of the studies search parameter
    + phenotypingCampaign (optional, text, `2001`) ... The year or Phenotyping campaign of a multiannual study (trees, grape, ...)
    + treatmentFactor (optional, text, `water regimen`) ... The environment, cultural practice applied to the study subjects.
    + observationUnitLevel (optional, text, `plot`) ... The type of the observationUnit. Returns only the observaton unit of the specified type; the parent levels ID can be accessed through observationUnitStructure.
 
+ Response 200 (application/json)
        
        "metadata":{
            "local" : "en"
        },
        "observationUnits" : 
        [
            {
                "studyId": "RIGW1",
                "studyLocation": "Bergheim",
                "studyURI": "http://phenome-fppn.fr/maugio/2345",
                "observationUnitLevelTypes" : [ "plant","plot", "bloc"]
                "germplasmURI": "http://inra.fr/vassal/41207Col0001E",
                "germplasmDbId": 3425,
                "germplasmDisplayName": "charger",
                "observatioUnitDbId": 20,
                "observationUnitURI": "http://phenome-fppn.fr/maugio/bloc/12/2345",
                "treatments": 
                [
                    {
                        "factor" : "water regimen" ,
                        "modality":"water deficit"
                    },
                ]
                "observationUnitLevelLabels": [ "1","26123", "1"]
                "attributes": 
                [
                    {"att1" :"value"}, 
                    {"numPot" :"23"}
                ] 
                "X" :"",
                "Y" :""
                "XLabel" :"", /*Consider using Json LD to handle local, for V2?*/
                "YLabel" :"",
                "observations": 
                [
                    {
                        "instanceNumber" : 1 /* For data colleciton, nullable */
                        "observationVariableId": "CO_321:0000045", 
                        "observationVariableDbId": 35, 
                        "season": "2005", /*phenotypingCampaignName*/
                        "observationValue" : string, /*data type inferred from the ontology*/
                        "observationTimeStamp": null, /*Iso Standard*/
                        "quality": "reliability of the observation",
                        "collectionFacilityLabel":  "phenodyne",
                        "collector" : "userURIOrName"
                    },
                    {
                        "instanceNumber" : 1 /* For data colleciton, nullable */
                        "observationVariableId": "http://www.cropontology.org/rdf/CO_321:0000025", 
                        "observationVariableDbId": 35, 
                        "phenotypingCampaignName": null,
                        "observationValue" :  32,
                        "observationTimeStamp": "2006-07-03::10:00", /*Iso Standard*/
                        "quality": "8",
                        "collectionFacilityLabel": null,
                        "colector" : "userURIOrName"
                    }
                ]
            },
        ]
    

## Phenotypes hierarchical, study agregated, dataset  [/brapi/v1/phenotypes/hierarchical??observationUnitLevel=plot&studyDbId=876&treatmentFactor=lowInput&germplasmGenus=&germplasmDbId&germplasmURI=http://data.inra.fr/accession/234Col342&germplasmSpecies=Triticum&panel=diversitypanel1&collection=none&observationVariables=CO_321:000034,CO_321:000025&location=bergheim&phenotypingCampaign=2005,2006&pageSize={pageSize}&page={page}]
Scope: PHENOTYPING.
Status: IN DISCUSSION.
### Phenotypes/hierarchical [GET]
location : first find all the studies for your location search parameter then inject this list of studyIds 
We probably need a better handling of the list of possible values.
In the response, note that trait ids can either be ontology ids or URI. 
+ Parameters
    + germplasmURI (optional, text, `http://data.inra.fr/accession/234Col342`) ... The name or synonym of external genebank accession identifier
    + germplasmDbId (optional, text, `986`) ... The name or synonym of external genebank accession identifier
    + germplasmSpecies (optional, text, `Aegilops taushi`) ... The name or synonym of genus or species ( merge with below ?)
    + germplasmGenus (optional, text, `Triticum, Hordeum`) ... The name or synonym of genus or species
    + panel (optional, text, `breedingProgramPanel2011`) ... The name of a specific panel 
    + collection (optional, text, `BRCCollection_Wheat`) ... The name of a specific Collection    
    + observationVariables (optional, text, `CO_321:00000234`) ... The IDs of traits, could be ontology ID, database ID or URI
    + studyDbId (optional, text, `2356`) ... The database ID / PK of the studies search parameter
    + phenotypingCampaign (optional, text, `2001`) ... The year or Phenotyping campaign of a multiannual study (trees, grape, ...)
    + treatmentFactor (optional, text, `water regimen`) ... The environment, cultural practice applied to the study subjects.
    + observationUnitLevel (optional, text, `plot`) ... The type of the observationUnit. Returns only the observaton unit of the specified type; the parent levels ID can be accessed through observationUnitStructure.
    

+ Response 200 (application/json)

        "metadata":{
            "local" : "en"
        },
        "studies":
        [
            {
                "studyId": "RIGW1",
                "studyLocation": "Bergheim",
                "studyURI": "http://phenome-fppn.fr/maugio/2345",
                "observationUnitLevelTypes" : [ "plant","plot", "bloc"]
                "observationUnits" : 
                [
                    {
                        "germplasmURI": "http://inra.fr/vassal/41207Col0001E",
                        "germplasmDbId": 3425,
                        "germplasmDisplayName": "charger",
                        "observatioUnitDbId": 20,
                        "observationUnitURI": "http://phenome-fppn.fr/maugio/bloc/12/2345",
                        "treatments": 
                        [
                            {
                                "factor" : "water regimen" ,
                                "modality":"water deficit"
                            },
                        ]
                        "observationUnitLevelLabels": [ "1","26123", "1"]
                        "attributes": 
                        [
                            {"att1" :"value"}, 
                            {"numPot" :"23"}
                        ] 
                        "X" :"",
                        "Y" :""
                        "XLabel" :"", /*Consider using Json LD to handle local, for V2?*/
                        "YLabel" :"", /*Extract like levels*/
                        "observations": 
                        [
                            {
                                "instanceNumber" : 1 /* For data colleciton, nullable */
                                "observationVariableId": "CO_321:0000045", 
                                "observationVariableDbId": 35, 
                                "season": "2005", /*phenotypingCampaignName*/
                                "observationValue" : string, /*data type inferred from the ontology*/
                                "observationTimeStamp": null, /*Iso Standard*/
                                "quality": "reliability of the observation",
                                "collectionFacilityLabel":  "phenodyne",
                                "collector" : "userURIOrName"
                            },
                            {
                                "instanceNumber" : 1 /* For data colleciton, nullable */
                                "observationVariableId": "http://www.cropontology.org/rdf/CO_321:0000025", 
                                "observationVariableDbId": 35, 
                                "season": null,
                                "observationValue" :  32,
                                "observationTimeStamp": "2006-07-03::10:00", /*Iso Standard*/
                                "quality": "8",
                                "collectionFacilityLabel": null,
                                "colector" : "userURIOrName"
                            }
                        ]
                    },
                ]
            }
        ]



## Phenotypes : germplasms  [/brapi/v1/phenotypes/germplasms??observationUnitLevel=plot&studyDbId=876&treatmentFactor=lowInput&germplasmGenus=&germplasmDbId&germplasmURI=http://data.inra.fr/accession/234Col342&germplasmSpecies=Triticum&panel=diversitypanel1&collection=none&observationVariables=CO_321:000034,CO_321:000025&location=bergheim&phenotypingCampaign=2005,2006&pageSize={pageSize}&page={page}]
Scope: PHENOTYPING.
Status: SUGGESTED.
### Phenotypes/germplasms [GET]
return the list of all germplasms used in the observation units filtered by the curent parameters.
This is usefull to get the list to display choices in a drop down listbox of a web or tablet interface.

+ Parameters
    + germplasmURI (optional, text, `http://data.inra.fr/accession/234Col342`) ... The name or synonym of external genebank accession identifier
    + germplasmDbId (optional, text, `986`) ... The name or synonym of external genebank accession identifier
    + germplasmSpecies (optional, text, `Aegilops taushi`) ... The name or synonym of genus or species ( merge with below ?)
    + germplasmGenus (optional, text, `Triticum, Hordeum`) ... The name or synonym of genus or species
    + panel (optional, text, `breedingProgramPanel2011`) ... The name of a specific panel 
    + collection (optional, text, `BRCCollection_Wheat`) ... The name of a specific Collection    
    + observationVariables (optional, text, `CO_321:00000234`) ... The IDs of traits, could be ontology ID, database ID or URI
    + studyDbId (optional, text, `2356`) ... The database ID / PK of the studies search parameter
    + phenotypingCampaign (optional, text, `2001`) ... The year or Phenotyping campaign of a multiannual study (trees, grape, ...)
    + treatmentFactor (optional, text, `water regimen`) ... The environment, cultural practice applied to the study subjects.
    + observationUnitLevel (optional, text, `plot`) ... The type of the observationUnit. Returns only the observaton unit of the specified type; the parent levels ID can be accessed through observationUnitStructure.
    

+ Response 200 (application/json)

        "metadata":{
            "pagination"    :   
                { "pageSize": 1000, 
                    "currentPage": 10, 
                    "totalCount": 27338, 
                    "totalPages": 28 },
                "status"        :   [ ],
            "local" : "en"
        },
        "germplasms":
        [
            {
                 "accessionNumber": "MOREX",
                "synonyms" : [ "M25", "CIHO15773" ],
                "PUI" : "",
                "germplasmName": "Pahang",
                "breederCode": "01BEL084609",
                "germplasmId": 382,
                "species":,
                "genus":
            }
        ]


# Group Traits

API to retrieve list and details of traits

## Data Types [/brapi/v1/traits/datatypes]

Call to retrieve a list of data types the traits can have.

### List study types [GET]
+ Response 200 (application/json)
        
        [
            "Numeric", "Categorical", "Date", "Text", "Picture", "Boolean"
        ]

## Traits [/brapi/v1/traits]
Scope: CORE.
Status: IN DISCUSSION.

Call to retrieve a list of traits available in the system.

### List all traits [GET]
+ Response 200 (application/json)
    
        {
            "metadata" : {
                "pagination" : { 
                    "pageSize": 3, 
                    "currentPage: 1, 
                    "totalCount": 300, 
                    "totalPages": 100 
                }
            },
        
            "traits" : [       
                { 
                    "id": "123", 
                    "name" : "Plant Height",
                    "description" : "Description of Plant Height",
                    "dataType" : "Numeric",
                    "unit" : "cm",
                    "defaultValue" : "0",
                    "validValues" : {
                        "min" : "1",
                        "max" : "100",
                        "categories" : "N/A"
                    }
                },
                { 
                    "id": "123", 
                    "name" : "Color",
                    "description" : "Color of the Plant",
                    "dataType" : "Categorical",
                    "unit" : "Does unit make sense for categorical traits?",
                    "defaultValue" : null,
                    "validValues" : {
                        "min" : "N/A",
                        "max" : "N/A",
                        "categories" : [
                            "Red",
                            "Green",
                            "Blue"
                        ]
                    }
                },
                { 
                    "id": "123", 
                    "name" : "Flowering Photo",
                    "description" : "Photo taken at flowering",
                    "dataType" : "Picture",
                    "unit" : "Does unit make sense for picture traits?",
                    "defaultValue" : null,
                    "unit" : "Does unit make sense for photo traits? N/A?",
                    "validValues" : {
                        "min" : "N/A",
                        "max" : "N/A",
                        "categories" : "N/A"
                    }
                }
            ]
        }


## Trait detail [/brapi/v1/traits/{id}]
Scope: CORE.
Status: IN DISCUSSION.

Retrieve trait metadata

+ Parameters
    + id (required, string, `464`) ... string containing id's of the traits

### Retrieve selected trait description [GET]

+ Response 200 (application/json)

        {
            "traitId": "1",
            "name": "plant_height",
            "format" : "numeric",
            "unit" : "cm",
            "method" : "Root to tip height at maturity.",
            "defaultValue" : "",
            "minimum" : "",
            "maximum": "",
            "categories" : [ "category1", "category2" ],
            "isVisible" : "T",
            "realPosition" : "?"
        }
        
        
# Group Genome Maps
Retrieving genetic or physical maps
- type: [Genetic | Physical]
- unit: [cM | Mb]
- linkageGroup: may be scaffold (i.e. linkageGroupCount may consist of chromosomes or scaffolds or a combination of the two)
- For genetic maps, map naming convention should tell whether it is a consensus or mapping population (name of population) map for genetic maps
- For physical maps, map naming convention should tell whether it is a reference genome (name of line) or pan-genome

## Genome Map  [/brapi/v1/maps?species={speciesId}&pageSize={pageSize}&page={page}&type={type}]

Get list of maps

do we need list of parents and specify mapping population?

### Get list of maps [GET]

+ Response 200 (application/json)

        {
            "pagination" : { "pageSize": 30, "currentPage": 2, "totalCount": 40, "totalPages":2 },
            "maps": [ {
                "mapId": 1,
                "name": "Some Map",
                "species": "Some species",
                "type": "Genetic",
                "unit": "cM",
                "publishedDate": "2008-04-16",
                "markerCount": 1000,
                "linkageGroupCount": 7,
                "comments": "This map contains ..."
                }, { 
                "mapId": 2,
                "name": "Some Other map",
                "species": "Some Species",
                "type": "Genetic",
                "unit": "cM",
                "publishedDate": "2009-01-12",
                "markerCount": 1501,
                "linkageGroupCount": 7,
                "comments": "this is blah blah"
                } 
            ]
        }

## Genome Map Details [/brapi/v1/maps/{mapId}]

### Get map details [GET]

Provides the number of markers on each linkageGroup and the max position on the linkageGroup

+ Paramters
    + mapID (required)
    + Should we provide pagination?
    
+ Response 200 (application/json)

        {
            "mapId": "id",
            "name": "Some map",
            "type": "Genetic",
            "unit": "cM",
            "linkageGroups": [ {
                "linkageGroupId": 1,
                "numberMarkers": 100000,
                "maxPosition": 10000000
            }, {
                "linkageGroup": 2
                "numberMarkers": 1247,
                "maxPostion": 12347889
            }
            ]
        }
## Genome Map Data [/brapi/v1/maps/{mapId}/positions?linkageGroupIdList={linkageGroupId,linkageGroupId}&pageSize={pageSize}&pageNumber={pageNumber}]

### Get map data [GET]

markers ordered by linkageGroup and position

+ Parameters
   + mapId (required, integer, `6`) ... integer id of the map
   + linkageGroupIdList (optional, comma separated list of strings)

+ Response 200 (application/json)

        {
            "pagination" : { "pageSize": 30, "currentPage": 2, "totalCount": 40, "totalPages":2 },
            "markers": [ {
                "markerId": 1,
                "markerName": "marker1",
                "location": "1000",
                "linkageGroup": "1A"
            }, {
                "markerId": 2,
                "markerName": "marker2",
                "location": "1001",
                "linkageGroup": "1A"
            }
            ]
        }
## Genome Map Data by range on linkageGroup [/brapi/v1/maps/{mapId}/positions/{linkageGroupId}?min={min}&max={max}&pageSize={pageSize}&pageNumber={pageNumber}]

### Get map data by range on linkageGroup [GET]

markers ordered by linkageGroup and position

+ Parameters
   + mapId (required, integer, `6`) ... integer id of the map
   + linkageGroupId (required, string)
   + min (optional) ... minimum position on linkage group
   + max (optional) ... maximumn position on linkage group

+ Response 200 (application/json)

        {
            "pagination" : { "pageSize": 30, "currentPage": 2, "totalCount": 40, "totalPages":2 },
            "markers": [ {
                "markerId": 1,
                "markerName": "marker1",
                "location": "1000"
            }, {
                "markerId": 2,
                "markerName": "marker2",
                "location": "1001"
            }
            ]
        }


# Group Field Data Collection
API calls and data structures required to enable the basic use case of collectiong measuremtn data from the fields using handheld devices.


## Observation Levels [/brapi/v1/observationLevels]

Call to retrieve the list of supported observation levels. 
Observation levels indicate the granularity level at which the measurements are taken.
The values are used to supply the `observationLevel` parameter in the "get observation units" call.

### List observation levels [GET]

+ Response 200 (application/json)
        
        ["plant", "plot"]

## Collection [/brapi/v1/study/{studyId}/observationunits?observationLevel={observationLevel}&studyInstance={studyInstance}]

The main API call for field data collection, to retrieve all the observation units within a study.

### Get all observation units [GET]

+ Parameters
    + observationLevel (required, string, `plot`) ... The granularity level of observation units. 
      Either `plotNumber` or `plantNumber` fields will be relavant depending on whether granularity is plot or plant respectively.
    + studyInstance (optional, number, `1`) ... Study instace to filter by, in case of studied with multiple instances.
+ Response 200 (application/json)

        [
            {
                "uniqueIdentifier": "abc-123",
                "germplasmId": "1",
                "germplasmName": "IR-8",
                "pedigree": "IR-8-FP/IR-8-MP",
                "enrtyNumber": "1",
                "entryType": "Test entry",
                "plotNumber": "1",
                "plantNumber" : "0",
                "xCoordinate" : "1",
                "yCoordinate" : "1",
                "replicationNumber": "1",
                "studyInstace": "1",
                "collectorName" : "Mr. Technician",
                "measurements": [
                    {
                        "measurementId": 1,
                        "traitId": 18020,
                        "traitName": "Plant_height",
                        "measurementTime" : "2015-06-16T00:53:26Z",
                        "value": null
                    },
                    { 
                        "measurementId": 2,
                        "traitId": 51496,
                        "traitName": "GW100_g",
                        "measurementTime" : "2015-06-16T00:53:26Z",
                        "value": null
                    }
                ]
            },
            {
                "uniqueIdentifier": "abc-456",
                "germplasmId": "2",
                "germplasmName": "IR-9",
                "pedigree": "IR-9-FP/IR-9-MP",
                "enrtyNumber": "2",
                "entryType": "Check entry",
                "plotNumber": "2",
                "plantNumber" : "0",
                "xCoordinate" : "1",
                "yCoordinate" : "2",
                "replicationNumber": "1",
                "studyInstace": "1",
                "collectorName" : "Mr. Technician",
                "measurements": [
                    {
                        "measurementId": 3,
                        "traitId": 18020,
                        "traitName": "Plant_height",
                        "measurementTime" : "2015-06-16T00:53:26Z",
                        "value": null
                    },
                    {   
                        "measurementId": 4,
                        "traitId": 51496,
                        "traitName": "GW100_g",
                        "measurementTime" : "2015-06-16T00:53:26Z",
                        "value": null
                    }
                ]
            }
        ]

### Save Measurements [PUT]
Call to invoke for saving the measurements captured for all the observation units.

+ Parameters
    + observationLevel (required, string, `plot`) ... The granularity level of observation units.
+ Request (application/json)

        [
            {
                "uniqueIdentifier": "abc-123",
                "germplasmId": "1",
                "germplasmName": "IR-8",
                "pedigree": "IR-8-FP/IR-8-MP",
                "enrtyNumber": "1",
                "entryType": "Test entry",
                "plotNumber": "1",
                "plantNumber" : "0",
                "xCoordinate" : "1",
                "yCoordinate" : "1",
                "replicationNumber": "1",
                "studyInstace": "1",
                "collectorName" : "Mr. Technician",
                "measurements": [
                    {
                        "measurementId": 1,
                        "traitId": 18020,
                        "traitName": "Plant_height",
                        "measurementTime" : "2015-06-16T00:53:26Z",
                        "value": "11"
                    },
                    {   
                        "measurementId": 2,
                        "traitId": 51496,
                        "traitName": "GW100_g",
                        "measurementTime" : "2015-06-16T00:53:26Z",
                        "value": "111"
                    }
                ]
            },
            {
                "uniqueIdentifier": "abc-456",
                "germplasmId": "2",
                "germplasmName": "IR-9",
                "pedigree": "IR-9-FP/IR-9-MP",
                "enrtyNumber": "2",
                "entryType": "Check entry",
                "plotNumber": "2",
                "plantNumber" : "0",
                "xCoordinate" : "1",
                "yCoordinate" : "2",
                "replicationNumber": "1",
                "studyInstace": "1",
                "collectorName" : "Mr. Technician",
                "measurements": [
                    {
                        "measurementId": 3,
                        "traitId": 18020,
                        "traitName": "Plant_height",
                        "measurementTime" : "2015-06-16T00:53:26Z",
                        "value": "22"
                    },
                    {   
                        "measurementId": 4,
                        "traitId": 51496,
                        "traitName": "GW100_g",
                        "measurementTime" : "2015-06-16T00:53:26Z",
                        "value": "222"
                    }
                ]
            }
        ]

+ Response 200 (application/json)

        {
            "metadata": {
                "status": {
                    "code": "success",
                    "message": "Successfully updated all measurements!"
                }
            }
        }


# Group Observation Set

API calls for retrieving observation sets and measurement data.

## Observation Sets [/brapi/v1/observationSets/{id}]

### List all observation sets [GET]

+ Parameters
    + id (optional,numeric) - unique identifier for the observation set
    + name (optional,string) - human-readable name for the observation set
    + species (optional,string) - species. This could be a set of comma-separated values.
    + program (optional,string) - the program the observation set belongs to. This could be a set of comma-separated values.
    + year (optional,numeric) - the year the observation set was created. This could be a set of comma-separated values.
    + geolocation (optional,string) - location
    + observationSetType (optional,string) - the type of the observation set.
    + observationUnitType (optional,string) - the type of observation unit under the observation set to be returned. This could be entry, plot,etc.
+ Response 200 (application/json)
    {
    "metadata": {},
    "observationSets": {
        "observationSetId": "11",
        "observationSetUri": "x.x.x/v1/observationSets/11",
        "observationSetName": "Human readable name",
        "species": [
            {
                "speciesName": "speciesName",
                "speciesUri": "x.x.x/v1/species/1"
            }
        ],
        "program": [
            {
                "programName": "programName",
                "programUri": "x.x.x/v1/programs/1"
            }
        ],
        "year": [
            "2013",
            "2014",
            "2015"
        ],
        "location": [
            {
                "locationName": "locationName",
                "locationNameUri": "x.x.x/v1/locations/1"
            }
        ],
        "observationSetType": "controlled vocabulary",
        "metadata": {
            "description": "this is a parent list",
            "author": "URL to user"
        },
        "observationData": [
            {
                "HARVEST_DATE": {
                    "observationVariableUri": "x.x.x/v1/observationVariables/123",
                    "value": "2015-06-16",
                    "timestamp": "",
                    "remarks": ""
                }
            }
        ],
        "childrenDatasets": [
            {
                "observationUnitId": "17778",
                "observationUnitTypeUri": "x.x.x/v1/observationUnitTypes/123",
                "parentObservationSetUri": "x.x.x/v1/observationSets/11",
                "parentObservationUnitUri": null,
                "germplasmId": "x.x.x/v1/germplasm/145",
                "metadata": {
                    "entryName": "IR 64",
                    "entryNumber": "1"
                },
                "observationData": [
                    {
                        "PLANT_HEIGHT_AVG": {
                            "observationVariableUri": "x.x.x/v1/observationVariables/123",
                            "value": "xxx",
                            "timestamp": "",
                            "remarks": ""
                        }
                    }
                ]
            },
            {
                "observationUnitId": "17779",
                "observationUnitTypeUri": "x.x.x/v1/observationUnitTypes/15",
                "parentObservationUnitUri": "x.x.x/v1/observationSets/17778",
                "germplasmId": "x.x.x/v1/germplasm/145",
                "metadata": {
                    "plotNo": "1",
                    "rep": "1"
                },
                "observationData": [
                    {
                        "PLANT_HEIGHT_1": {
                            "observationVariableUri": "x.x.x/v1/observationVariables/129",
                            "observationUnitTypeUri": "x.x.x/v1/observationUnitTypes/15",
                            "value": "xxx",
                            "timestamp": "",
                            "remarks": ""
                        }
                    }
                ]
            },
            {
                "observationUnitId": "17780",
                "parentObservationUnitUri": "x.x.x/v1/observationSets/17778",
                "germplasmId": "x.x.x/v1/germplasm/145",
                "metadata": {
                    "plotNo": "1",
                    "rep": "2"
                },
                "observationData": [
                    {
                        "PLANT_HEIGHT_2": {
                            "observationVariableUri": "x.x.x/v1/observationVariables/129",
                            "observationUnitTypeUri": "x.x.x/v1/observationUnitTypes/15",
                            "value": "xxx",
                            "timestamp": "",
                            "remarks": ""
                        }
                    }
                ]
            }
        ]
    }
}